package com.example;

import com.example.sortAlgorithm.*;
import lombok.SneakyThrows;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.Arrays;
import java.util.Random;
import java.util.function.Supplier;
import java.util.stream.IntStream;

@SpringBootApplication
public class Main {


    private static final int RUN_COUNT = 5;
    public static int[] array = null;

    @SneakyThrows
    public static void main(String[] args) {
//        SpringApplication.run(Main.class, args);

        array = generateArray(2000);

//        System.out.println("Not sorted     " + Arrays.toString(array));
//        System.out.println("Bubble Sort    " + Arrays.toString(BubbleSort.sort(Arrays.copyOf(array, array.length))));
//        System.out.println("Cocktail Sort  " + Arrays.toString(CocktailSort.sort(Arrays.copyOf(array, array.length))));
//        System.out.println("Insertion Sort " + Arrays.toString(InsertionSort.sort(Arrays.copyOf(array, array.length))));
//        System.out.println("Shell Sort     " + Arrays.toString(ShellSort.sort(Arrays.copyOf(array, array.length))));
//        System.out.println("Tree Sort      " + Arrays.toString(TreeSort.sort(Arrays.copyOf(array, array.length))));
//        System.out.println("Splay Sort     " + Arrays.toString(SplaySort.sort(Arrays.copyOf(array, array.length))));

        checkCorrectnessOfSort();
        measureAllSort();
    }

    private static void checkCorrectnessOfSort() {
        if (checkSort(BubbleSort.sort(Arrays.copyOf(array, array.length))) &&
                checkSort(CocktailSort.sort(Arrays.copyOf(array, array.length))) &&
                checkSort(InsertionSort.sort(Arrays.copyOf(array, array.length))) &&
                checkSort(TreeSort.sort(Arrays.copyOf(array, array.length))) &&
                checkSort(SplaySort.sort(Arrays.copyOf(array, array.length))) ||
                checkSort(ShellSort.sort(Arrays.copyOf(array, array.length)))) {
            throw new IllegalStateException();
        }
    }

    private static void measureAllSort() {
        measure("Bubble Sort     ", () -> BubbleSort.sort(Arrays.copyOf(array, array.length)));
        measure("Cocktail Sort   ", () -> CocktailSort.sort(Arrays.copyOf(array, array.length)));
        measure("Insertion Sort  ", () -> InsertionSort.sort(Arrays.copyOf(array, array.length)));
        measure("Shell Sort      ", () -> ShellSort.sort(Arrays.copyOf(array, array.length)));
        measure("Tree Sort       ", () -> TreeSort.sort(Arrays.copyOf(array, array.length)));
        measure("Splay Sort      ", () -> SplaySort.sort(Arrays.copyOf(array, array.length)));
    }

    private static int[] generateArray(int size) {
        return IntStream.generate(() -> new Random().nextInt(size * 10)).limit(size).toArray();
    }

    static boolean checkSort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            if (array[i] > array[i + 1]) {
                return true;
            }
        }
        return false;
    }

    /**
     * Used by the measure method to determine how long a Supplier takes to
     * return a result.
     *
     * @param <T>      The type of the result provided by the Supplier
     * @param supplier The Supplier to measure execution time of
     * @return how long a Supplier takes to return a result
     */
    static <T> long measureOneRun(Supplier<T> supplier) {
        long startTime = System.nanoTime();
        supplier.get();
        long endTime = System.nanoTime();
        return (endTime - startTime + 500_000L) / 1_000_000L;
    }

    /**
     * Repeatedly generate results using a Supplier to eliminate some of the
     * issues of running a micro-benchmark.
     *
     * @param <T>      The type of result generated by the Supplier
     * @param label    Description of what's being measured
     * @param supplier The Supplier to measure execution time of
     */
    static <T> void measure(String label, Supplier<T> supplier) {
        long result = 0;

        for (int i = 0; i < RUN_COUNT; i++)
            result += measureOneRun(supplier);

        System.out.printf("%s took %dms%n", label, result / RUN_COUNT);
    }

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/tree").allowedOrigins("http://localhost:8080");
            }
        };
    }
}
